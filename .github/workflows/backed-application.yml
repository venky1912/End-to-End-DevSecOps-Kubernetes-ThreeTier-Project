name: backend application

# Trigger the workflow on push or pull request events to the master branch
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'helm/**'
      - 'k8s/**'
      - 'README.md'
      - 'eks/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'helm/**'
      - 'k8s/**'
      - 'README.md'
      - 'eks/**'

env:
  AWS_DEFAULT_REGION: 'eu-west-2'
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  Checkout-Install-Dep:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: Application-Code/backend

    steps:
    
      # Stage 1: Checkout code from GitHub
      - name: Checkout code from GitHub
        uses: actions/checkout@v4
        with:
          #repository: 'venky1912/End-to-End-DevSecOps-Kubernetes-ThreeTier-Project.git'
          token: ${{ secrets.GH_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Match the Node.js version in the Dockerfile

      # Step 3: Cache node_modules (optional, but can speed up builds)
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

       # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Run tests (optional, but recommended)
      # - name: Run tests
      #   run: npm test

  Code-Quality-Check:
    runs-on: ubuntu-latest
    needs: Checkout-Install-Dep 
    defaults:
      run:
        shell: bash
        working-directory: ./Application-Code/backend/

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v4
        with:
          #repository: 'venky1912/End-to-End-DevSecOps-Kubernetes-ThreeTier-Project.git'
          token: ${{ secrets.GH_PAT }}

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Set JAVA_HOME
        run: |
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

      - name: Verify Java version
        run: java -version

      - name: Install SonarQube Scanner
        run: npm install -g sonar-scanner

      # - name: Add SonarQube Scanner to PATH
      #   run: |
      #     SONAR_SCANNER_PATH=$(npm bin -g)
      #     echo "SONAR_SCANNER_PATH=$SONAR_SCANNER_PATH" >> $GITHUB_ENV
      #     echo "$SONAR_SCANNER_PATH" >> $GITHUB_PATH

      - name: Verify SonarQube Scanner installation
        run: sonar-scanner --version

      # Step 6: SonarQube Analysis
      - name: SonarQube Analysis
        #uses: sonarsource/sonarqube-scan-action@v1.1.0
        working-directory: Application-Code/backend
        run: |
          sonar-scanner \
          -Dsonar.projectKey="three-tier-backend" \
          -Dsonar.projectName="three-tier-backend" \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # Add this if using Hosted server
        
      # Introduce a delay to allow SonarQube to process the results
      - name: Wait for SonarQube to process results
        run: sleep 3

      # Step 7: SonarQube Quality Gate Check
      - name: SonarQube Quality Gate
        id: quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        #continue-on-error: false

      # Step 8: Notify on Quality Gate Failure (Optional)
      - name: Notify on Quality Gate Failure
        run: echo "Quality Gate Failed! Taking necessary actions."
        if: ${{ steps.quality-gate.outputs.conclusion != 'success' }} # Only run if the quality gate passes

  
  OWASP-Dependency-Check:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: Application-Code/backend

    needs: Code-Quality-Check

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v4
        with:
          #repository: 'venky1912/End-to-End-DevSecOps-Kubernetes-ThreeTier-Project.git'
          token: ${{ secrets.GH_PAT }}

      # Stage 9: OWASP Dependency-Check Scan
      - name: OWASP Dependency-Check
        uses: dependency-check/github-action@v2.0.1
        with:
          scan: './'
          format: 'ALL'
          failCriteria: 'LOW'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://github.com/venky1912/End-to-End-DevSecOps-Kubernetes-ThreeTier-Project'
          format: 'html'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}


  File-Scan-With-Trivy:
    runs-on: ubuntu-latest
    needs: OWASP-Dependency-Check
    defaults:
      run:
        shell: bash
        working-directory: Application-Code/backend

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v4
        with:
          #repository: 'venky1912/End-to-End-DevSecOps-Kubernetes-ThreeTier-Project.git'
          token: ${{ secrets.GH_PAT }}

      
      # Trivy File Scan
      - name: Run Trivy FS Scan
        uses: aquasecurity/trivy-action@v0.6.0
        with:
          scan-type: 'fs'
          path: './'
          format: 'json'
          output: 'trivy-report.json'  # Specify the output file
          exit-code: '1'

  Docker-Build-Push:
    runs-on: ubuntu-latest
    needs: File-Scan-With-Trivy
    defaults:
      run:
        shell: bash
        working-directory: Application-Code/backend

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v4
        with:
          #repository: 'venky1912/End-to-End-DevSecOps-Kubernetes-ThreeTier-Project.git'
          token: ${{ secrets.GH_PAT }}

      - name: Prune Docker system and containers
        run: |
          docker system prune -f
          docker container prune -f


      # Build the Docker image and Push it the DockerHub
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          cd Application-Code/backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-backend:${{ github.run_number }} .

      - name: Tag and Push Docker Image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/mern-backend:${{ github.run_number }} ${{ secrets.DOCKER_USERNAME }}/mern-backend:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-backend:${{ github.run_number }}

  Trivy-Image-Scan:
    runs-on: ubuntu-latest
    needs: Docker-Build-Push

    steps:
      
      - name: TRIVY Image Scan
        uses: aquasecurity/trivy-action@v0.6.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/mern-backend:${{ github.run_number }}
          format: 'table'  # You can use 'json' or 'sarif' depending on your needs
          output: 'trivyimage.txt'


  Update-Deployment-File:
    runs-on: ubuntu-latest
    needs: Trivy-Image-Scan
    defaults:
      run:
        shell: bash
        working-directory: K8s-Manifests-file/Backend

    steps:
      # Stage 10: Checkout Kubernetes Manifests
      - name: Checkout Kubernetes Manifests
        uses: actions/checkout@v4
        with:
          repository: 'venky1912/End-to-End-DevSecOps-Kubernetes-ThreeTier-Project.git'
          token: ${{ secrets.GH_PAT }}
          path: K8s-Manifests-file/Backend

        # Extract the current image tag from deployment.yml
      - name: Update image tag in Kubernetes deployment.yml
        run: |
          cd K8s-Manifests-file/Backend

          imageTag=$(grep -oP '(?<=image: ).*' deployment.yml)
        
          sed -i "s|$imageTag|${{ secrets.DOCKERHUB_USERNAME }}/mern-backend:${{ github.run_number }}|" deployment.yml

        ##Push cahnges to the Github Repository
      - name: Commit The changes
        run: |
          git config --global user.email "snikommuvenky115@gmail.com"
          git config --global user.name "Venky Sanikommu"
          git add deployment.yml
          git commit -m "Update deployment image to version ${{ github.run_number }}"
      
      - name: Push Changes to Github
        env:
          GH_PAT: ${{ secrets.GT_PAT }}

        run: |
          git push https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }} HEAD:main