name: 'EKS Cluster Terraform'

on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
    branches:
      - main
      - dev
      - staging   

env:
  AWS_REGION: eu-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  
  CheckOut-Repo:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || 'dev' }}

    defaults:
      run:
        shell: bash
        working-directory: eks

    env:
      AWS_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to GitHub Modules Repo
      run: |
        git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"

  Setting-Up-Terraform:
    runs-on: ubuntu-latest
    needs: CheckOut-Repo

    steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.4

    - name: Authenticate to GitHub Modules Repo
      run: |
        git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

  Terraform-Initializing:
    runs-on: ubuntu-latest
    needs: Setting-Up-Terraform

    steps:

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.4
        
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Terraform Init
      working-directory: eks
      run: terraform init

  Terraform-Formatting-Validating:
    runs-on: ubuntu-latest
    needs: Terraform-Initializing

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.4
        
    - name: Terraform Init
      working-directory: eks
      run: terraform init

    - name: Terraform Format
      working-directory: eks
      run: terraform fmt

    - name: Terraform Validate
      working-directory: eks
      run: terraform validate

  Terraform-Action:
    runs-on: ubuntu-latest
    needs: Terraform-Formatting-Validating
    
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.4

    - name: Terraform Init
      working-directory: eks
      run: terraform init

    # - name: Terraform Plan
    #   if: ${{ github.event_name == 'push' || github.event.inputs.action == 'plan' }}
    #   working-directory: eks
    #   run: terraform plan -var-file=${{ github.ref == 'refs/heads/main' && 'prod.tfvars' || github.ref == 'refs/heads/staging' && 'staging.tfvars' || 'dev.tfvars' }} -input=false
    
    # - name: Terraform Action
    #   if: ${{ github.event_name == 'push' || github.event.inputs.action == 'apply' }}
    #   working-directory: eks
    #   run: terraform apply -auto-approve -var-file=${{ github.ref == 'refs/heads/main' && 'prod.tfvars' || github.ref == 'refs/heads/staging' && 'staging.tfvars' || 'dev.tfvars' }} -input=false

    - name: Terraform Destroy
      if: ${{ github.event.inputs.action == 'destroy' }}
      working-directory: eks
      run: terraform destroy -auto-approve -var-file=${{ github.ref == 'refs/heads/main' && 'prod.tfvars' || github.ref == 'refs/heads/staging' && 'staging.tfvars' || 'dev.tfvars' }} -input=false
